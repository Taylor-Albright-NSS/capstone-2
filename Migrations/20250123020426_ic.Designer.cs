// <auto-generated />
using System;
using System.Collections.Generic;
using Capstone2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Capstone_2.Migrations
{
    [DbContext(typeof(Capstone2DbContext))]
    [Migration("20250123020426_ic")]
    partial class ic
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Capstone2.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDateTime = new DateTime(2022, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            ImageLocation = "https://robohash.org/numquamutut.png?size=150x150&set=set1",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = 2,
                            CreateDateTime = new DateTime(2023, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "John",
                            IdentityUserId = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            ImageLocation = "https://robohash.org/nisiautemet.png?size=150x150&set=set1",
                            LastName = "Doe"
                        },
                        new
                        {
                            Id = 3,
                            CreateDateTime = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jane",
                            IdentityUserId = "a7d21fac-3b21-454a-a747-075f072d0cf3",
                            ImageLocation = "https://robohash.org/molestiaemagnamet.png?size=150x150&set=set1",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = 4,
                            CreateDateTime = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Alice",
                            IdentityUserId = "c806cfae-bda9-47c5-8473-dd52fd056a9b",
                            ImageLocation = "https://robohash.org/deseruntutipsum.png?size=150x150&set=set1",
                            LastName = "Johnson"
                        },
                        new
                        {
                            Id = 5,
                            CreateDateTime = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Bob",
                            IdentityUserId = "9ce89d88-75da-4a80-9b0d-3fe58582b8e2",
                            ImageLocation = "https://robohash.org/quiundedignissimos.png?size=150x150&set=set1",
                            LastName = "Williams"
                        },
                        new
                        {
                            Id = 6,
                            CreateDateTime = new DateTime(2022, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Eve",
                            IdentityUserId = "d224a03d-bf0c-4a05-b728-e3521e45d74d",
                            ImageLocation = "https://robohash.org/hicnihilipsa.png?size=150x150&set=set1",
                            LastName = "Davis"
                        });
                });

            modelBuilder.Entity("Capstone_2.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttackPower")
                        .HasColumnType("integer");

                    b.Property<int>("BluntArmor")
                        .HasColumnType("integer");

                    b.Property<int>("BluntPenetration")
                        .HasColumnType("integer");

                    b.Property<int>("Health")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PiercingArmor")
                        .HasColumnType("integer");

                    b.Property<int>("PiercingPenetration")
                        .HasColumnType("integer");

                    b.Property<int>("SlashingArmor")
                        .HasColumnType("integer");

                    b.Property<int>("SlashingPenetration")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AttackPower = 10,
                            BluntArmor = 3,
                            BluntPenetration = 7,
                            Health = 50,
                            Name = "Fighter",
                            PiercingArmor = 3,
                            PiercingPenetration = 6,
                            SlashingArmor = 3,
                            SlashingPenetration = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AttackPower = 20,
                            BluntArmor = 9,
                            BluntPenetration = 1,
                            Health = 100,
                            Name = "Paladin",
                            PiercingArmor = 9,
                            PiercingPenetration = 1,
                            SlashingArmor = 9,
                            SlashingPenetration = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            AttackPower = 5,
                            BluntArmor = 1,
                            BluntPenetration = 10,
                            Health = 40,
                            Name = "Thief",
                            PiercingArmor = 2,
                            PiercingPenetration = 10,
                            SlashingArmor = 1,
                            SlashingPenetration = 10,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Capstone_2.Models.Enemy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttackPower")
                        .HasColumnType("integer");

                    b.Property<int>("BaseExperience")
                        .HasColumnType("integer");

                    b.Property<int>("BaseHealth")
                        .HasColumnType("integer");

                    b.Property<int>("BluntArmor")
                        .HasColumnType("integer");

                    b.Property<bool>("BluntDamage")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FireResist")
                        .HasColumnType("integer");

                    b.Property<int>("IceResist")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<int>>("ItemIds")
                        .HasColumnType("integer[]");

                    b.Property<int>("LightningResist")
                        .HasColumnType("integer");

                    b.Property<int>("MaxGold")
                        .HasColumnType("integer");

                    b.Property<int>("MaxLevel")
                        .HasColumnType("integer");

                    b.Property<int>("MinGold")
                        .HasColumnType("integer");

                    b.Property<int>("MinLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PiercingArmor")
                        .HasColumnType("integer");

                    b.Property<bool>("PiercingDamage")
                        .HasColumnType("boolean");

                    b.Property<int>("SlashingArmor")
                        .HasColumnType("integer");

                    b.Property<bool>("SlashingDamage")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Enemies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AttackPower = 5,
                            BaseExperience = 10,
                            BaseHealth = 10,
                            BluntArmor = 0,
                            BluntDamage = false,
                            Description = "",
                            FireResist = 0,
                            IceResist = 0,
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/capstone2-3243e.firebasestorage.app/o/uploads%2Fno%20image%20default.avif?alt=media&token=0aa5fa20-7104-4ac6-8845-92767fe685f2",
                            ItemIds = new List<int>(),
                            LightningResist = 0,
                            MaxGold = 0,
                            MaxLevel = 3,
                            MinGold = 0,
                            MinLevel = 1,
                            Name = "Mudling",
                            PiercingArmor = 0,
                            PiercingDamage = false,
                            SlashingArmor = 0,
                            SlashingDamage = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AttackPower = 5,
                            BaseExperience = 10,
                            BaseHealth = 10,
                            BluntArmor = 0,
                            BluntDamage = false,
                            Description = "",
                            FireResist = 0,
                            IceResist = 0,
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/capstone2-3243e.firebasestorage.app/o/uploads%2FNo%20Image.png?alt=media&token=a7ddaad7-0650-43d7-bcdf-de98a4b81542",
                            ItemIds = new List<int>(),
                            LightningResist = 0,
                            MaxGold = 0,
                            MaxLevel = 3,
                            MinGold = 0,
                            MinLevel = 1,
                            Name = "Placeholder",
                            PiercingArmor = 0,
                            PiercingDamage = false,
                            SlashingArmor = 0,
                            SlashingDamage = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            AttackPower = 5,
                            BaseExperience = 10,
                            BaseHealth = 10,
                            BluntArmor = 0,
                            BluntDamage = false,
                            Description = "",
                            FireResist = 0,
                            IceResist = 0,
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/capstone2-3243e.firebasestorage.app/o/uploads%2FNo%20Image.png?alt=media&token=a7ddaad7-0650-43d7-bcdf-de98a4b81542",
                            ItemIds = new List<int>(),
                            LightningResist = 0,
                            MaxGold = 0,
                            MaxLevel = 3,
                            MinGold = 0,
                            MinLevel = 1,
                            Name = "Placeholder",
                            PiercingArmor = 0,
                            PiercingDamage = false,
                            SlashingArmor = 0,
                            SlashingDamage = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            AttackPower = 5,
                            BaseExperience = 10,
                            BaseHealth = 10,
                            BluntArmor = 0,
                            BluntDamage = false,
                            Description = "",
                            FireResist = 0,
                            IceResist = 0,
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/capstone2-3243e.firebasestorage.app/o/uploads%2FNo%20Image.png?alt=media&token=a7ddaad7-0650-43d7-bcdf-de98a4b81542",
                            ItemIds = new List<int>(),
                            LightningResist = 0,
                            MaxGold = 0,
                            MaxLevel = 3,
                            MinGold = 0,
                            MinLevel = 1,
                            Name = "Placeholder",
                            PiercingArmor = 0,
                            PiercingDamage = false,
                            SlashingArmor = 0,
                            SlashingDamage = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            AttackPower = 5,
                            BaseExperience = 10,
                            BaseHealth = 10,
                            BluntArmor = 0,
                            BluntDamage = false,
                            Description = "",
                            FireResist = 0,
                            IceResist = 0,
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/capstone2-3243e.firebasestorage.app/o/uploads%2FNo%20Image.png?alt=media&token=a7ddaad7-0650-43d7-bcdf-de98a4b81542",
                            ItemIds = new List<int>(),
                            LightningResist = 0,
                            MaxGold = 0,
                            MaxLevel = 3,
                            MinGold = 0,
                            MinLevel = 1,
                            Name = "Placeholder",
                            PiercingArmor = 0,
                            PiercingDamage = false,
                            SlashingArmor = 0,
                            SlashingDamage = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            AttackPower = 5,
                            BaseExperience = 10,
                            BaseHealth = 10,
                            BluntArmor = 0,
                            BluntDamage = false,
                            Description = "",
                            FireResist = 0,
                            IceResist = 0,
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/capstone2-3243e.firebasestorage.app/o/uploads%2FNo%20Image.png?alt=media&token=a7ddaad7-0650-43d7-bcdf-de98a4b81542",
                            ItemIds = new List<int>(),
                            LightningResist = 0,
                            MaxGold = 0,
                            MaxLevel = 3,
                            MinGold = 0,
                            MinLevel = 1,
                            Name = "Placeholder",
                            PiercingArmor = 0,
                            PiercingDamage = false,
                            SlashingArmor = 0,
                            SlashingDamage = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            AttackPower = 5,
                            BaseExperience = 10,
                            BaseHealth = 10,
                            BluntArmor = 0,
                            BluntDamage = false,
                            Description = "",
                            FireResist = 0,
                            IceResist = 0,
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/capstone2-3243e.firebasestorage.app/o/uploads%2FNo%20Image.png?alt=media&token=a7ddaad7-0650-43d7-bcdf-de98a4b81542",
                            ItemIds = new List<int>(),
                            LightningResist = 0,
                            MaxGold = 0,
                            MaxLevel = 3,
                            MinGold = 0,
                            MinLevel = 1,
                            Name = "Placeholder",
                            PiercingArmor = 0,
                            PiercingDamage = false,
                            SlashingArmor = 0,
                            SlashingDamage = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            AttackPower = 5,
                            BaseExperience = 10,
                            BaseHealth = 10,
                            BluntArmor = 0,
                            BluntDamage = false,
                            Description = "",
                            FireResist = 0,
                            IceResist = 0,
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/capstone2-3243e.firebasestorage.app/o/uploads%2FNo%20Image.png?alt=media&token=a7ddaad7-0650-43d7-bcdf-de98a4b81542",
                            ItemIds = new List<int>(),
                            LightningResist = 0,
                            MaxGold = 0,
                            MaxLevel = 3,
                            MinGold = 0,
                            MinLevel = 1,
                            Name = "Placeholder",
                            PiercingArmor = 0,
                            PiercingDamage = false,
                            SlashingArmor = 0,
                            SlashingDamage = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            AttackPower = 5,
                            BaseExperience = 10,
                            BaseHealth = 10,
                            BluntArmor = 0,
                            BluntDamage = false,
                            Description = "",
                            FireResist = 0,
                            IceResist = 0,
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/capstone2-3243e.firebasestorage.app/o/uploads%2FNo%20Image.png?alt=media&token=a7ddaad7-0650-43d7-bcdf-de98a4b81542",
                            ItemIds = new List<int>(),
                            LightningResist = 0,
                            MaxGold = 0,
                            MaxLevel = 3,
                            MinGold = 0,
                            MinLevel = 1,
                            Name = "Placeholder",
                            PiercingArmor = 0,
                            PiercingDamage = false,
                            SlashingArmor = 0,
                            SlashingDamage = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            AttackPower = 5,
                            BaseExperience = 10,
                            BaseHealth = 10,
                            BluntArmor = 0,
                            BluntDamage = false,
                            Description = "",
                            FireResist = 0,
                            IceResist = 0,
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/capstone2-3243e.firebasestorage.app/o/uploads%2FNo%20Image.png?alt=media&token=a7ddaad7-0650-43d7-bcdf-de98a4b81542",
                            ItemIds = new List<int>(),
                            LightningResist = 0,
                            MaxGold = 0,
                            MaxLevel = 3,
                            MinGold = 0,
                            MinLevel = 1,
                            Name = "Placeholder",
                            PiercingArmor = 0,
                            PiercingDamage = false,
                            SlashingArmor = 0,
                            SlashingDamage = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 11,
                            AttackPower = 5,
                            BaseExperience = 10,
                            BaseHealth = 10,
                            BluntArmor = 0,
                            BluntDamage = false,
                            Description = "",
                            FireResist = 0,
                            IceResist = 0,
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/capstone2-3243e.firebasestorage.app/o/uploads%2FNo%20Image.png?alt=media&token=a7ddaad7-0650-43d7-bcdf-de98a4b81542",
                            ItemIds = new List<int>(),
                            LightningResist = 0,
                            MaxGold = 0,
                            MaxLevel = 3,
                            MinGold = 0,
                            MinLevel = 1,
                            Name = "Placeholder",
                            PiercingArmor = 0,
                            PiercingDamage = false,
                            SlashingArmor = 0,
                            SlashingDamage = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 12,
                            AttackPower = 5,
                            BaseExperience = 10,
                            BaseHealth = 10,
                            BluntArmor = 0,
                            BluntDamage = false,
                            Description = "",
                            FireResist = 0,
                            IceResist = 0,
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/capstone2-3243e.firebasestorage.app/o/uploads%2FNo%20Image.png?alt=media&token=a7ddaad7-0650-43d7-bcdf-de98a4b81542",
                            ItemIds = new List<int>(),
                            LightningResist = 0,
                            MaxGold = 0,
                            MaxLevel = 3,
                            MinGold = 0,
                            MinLevel = 1,
                            Name = "Placeholder",
                            PiercingArmor = 0,
                            PiercingDamage = false,
                            SlashingArmor = 0,
                            SlashingDamage = false,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Capstone_2.Models.EnemyItem", b =>
                {
                    b.Property<int>("EnemiesId")
                        .HasColumnType("integer");

                    b.Property<int>("ItemsId")
                        .HasColumnType("integer");

                    b.HasKey("EnemiesId", "ItemsId");

                    b.HasIndex("ItemsId");

                    b.ToTable("EnemiesItems");

                    b.HasData(
                        new
                        {
                            EnemiesId = 1,
                            ItemsId = 1
                        },
                        new
                        {
                            EnemiesId = 1,
                            ItemsId = 2
                        },
                        new
                        {
                            EnemiesId = 1,
                            ItemsId = 3
                        });
                });

            modelBuilder.Entity("Capstone_2.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sword"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Twohanded Sword"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bow"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Fist Weapon"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Axe"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Leather Chest"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Potion"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Small Gem"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Dagger"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Mudball"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Fish"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Leather Trousers"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Plate Gauntlets"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Large Bone"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Small Bone"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Cape"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Small Key"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Fishing Rod"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Bright Yellow Flower"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Tome"
                        });
                });

            modelBuilder.Entity("EnemyItem", b =>
                {
                    b.Property<int>("EnemiesId")
                        .HasColumnType("integer");

                    b.Property<int>("ItemsId")
                        .HasColumnType("integer");

                    b.HasKey("EnemiesId", "ItemsId");

                    b.HasIndex("ItemsId");

                    b.ToTable("EnemyItem");

                    b.HasData(
                        new
                        {
                            EnemiesId = 1,
                            ItemsId = 1
                        },
                        new
                        {
                            EnemiesId = 1,
                            ItemsId = 2
                        },
                        new
                        {
                            EnemiesId = 1,
                            ItemsId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2caf7d02-d78b-4f9b-89b7-be1419c974d3",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFaLxScK7LMIRL2GcNrdQgpqVNOoOQJWTvx79jLlbrk7fKXssGJD/no/OYBTN64h7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b0858785-47e1-4353-b7c1-f04d7a440065",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f7e8d06-7fc3-4c4e-8178-172c8a86dc0a",
                            Email = "john@doe.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEEVzIOTPt+5MU9SeE/cIBfPYFvQHCASxV4rTWWpDv3oTvxg7tSqrdZ6T+wXiu6/ydw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6015536e-d9c0-4363-87c4-5bb3b869aa16",
                            TwoFactorEnabled = false,
                            UserName = "JohnDoe"
                        },
                        new
                        {
                            Id = "a7d21fac-3b21-454a-a747-075f072d0cf3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1665fe77-600b-4e5d-a1ed-90e6090da51d",
                            Email = "jane@smith.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEEoVmmzwOcJBOzLF8HvI2Gsi4KMtmKCoGDG6BJMfoXnCFPpzXF0tlmVbnNsVdSa2FA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8d31796-2ba1-43a1-b184-f0ca1d8e43da",
                            TwoFactorEnabled = false,
                            UserName = "JaneSmith"
                        },
                        new
                        {
                            Id = "c806cfae-bda9-47c5-8473-dd52fd056a9b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6ecff9f-2e23-44ab-87de-52bcfd5a0c34",
                            Email = "alice@johnson.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGzjiEpBv2M6UUtR8yFeALTG49sXN+5HqNUwFro62+tRW9mwt+HJx8bqgv3zPGmpGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "11ac42c7-aea2-4320-84f4-0e3dad197da5",
                            TwoFactorEnabled = false,
                            UserName = "AliceJohnson"
                        },
                        new
                        {
                            Id = "9ce89d88-75da-4a80-9b0d-3fe58582b8e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce2ec5b0-3196-418b-93f1-5d001075411b",
                            Email = "bob@williams.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBuxM6qxXVee9fMFyUKh/6Nxb7VpkifdxEj7SIi8RReBIkmblCtBZRgb0sibRmEgzA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "225ed41a-79f4-406a-88b2-8471334f1fc2",
                            TwoFactorEnabled = false,
                            UserName = "BobWilliams"
                        },
                        new
                        {
                            Id = "d224a03d-bf0c-4a05-b728-e3521e45d74d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f7414ab-98a5-4dcd-a4f9-bd057094396f",
                            Email = "Eve@Davis.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEPdPQpcDh6ykkgy0wLf5vrXd2fgqVHq8vQVJaGHJDMofrI/fJX5gauWm2/9bM8LY9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "89e747f8-8f2b-4cff-8517-9dbda7d58dce",
                            TwoFactorEnabled = false,
                            UserName = "EveDavis"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Capstone2.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Capstone_2.Models.Enemy", b =>
                {
                    b.HasOne("Capstone2.Models.UserProfile", null)
                        .WithMany("Enemies")
                        .HasForeignKey("UserProfileId");
                });

            modelBuilder.Entity("Capstone_2.Models.EnemyItem", b =>
                {
                    b.HasOne("Capstone_2.Models.Enemy", "Enemy")
                        .WithMany("EnemyItems")
                        .HasForeignKey("EnemiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone_2.Models.Item", "Item")
                        .WithMany("EnemyItems")
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enemy");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("EnemyItem", b =>
                {
                    b.HasOne("Capstone_2.Models.Enemy", null)
                        .WithMany()
                        .HasForeignKey("EnemiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone_2.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Capstone2.Models.UserProfile", b =>
                {
                    b.Navigation("Enemies");
                });

            modelBuilder.Entity("Capstone_2.Models.Enemy", b =>
                {
                    b.Navigation("EnemyItems");
                });

            modelBuilder.Entity("Capstone_2.Models.Item", b =>
                {
                    b.Navigation("EnemyItems");
                });
#pragma warning restore 612, 618
        }
    }
}
