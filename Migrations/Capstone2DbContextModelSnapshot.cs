// <auto-generated />
using System;
using System.Collections.Generic;
using Capstone2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Capstone_2.Migrations
{
    [DbContext(typeof(Capstone2DbContext))]
    partial class Capstone2DbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Capstone2.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDateTime = new DateTime(2022, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            ImageLocation = "https://robohash.org/numquamutut.png?size=150x150&set=set1",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = 2,
                            CreateDateTime = new DateTime(2023, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "John",
                            IdentityUserId = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            ImageLocation = "https://robohash.org/nisiautemet.png?size=150x150&set=set1",
                            LastName = "Doe"
                        },
                        new
                        {
                            Id = 3,
                            CreateDateTime = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jane",
                            IdentityUserId = "a7d21fac-3b21-454a-a747-075f072d0cf3",
                            ImageLocation = "https://robohash.org/molestiaemagnamet.png?size=150x150&set=set1",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = 4,
                            CreateDateTime = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Alice",
                            IdentityUserId = "c806cfae-bda9-47c5-8473-dd52fd056a9b",
                            ImageLocation = "https://robohash.org/deseruntutipsum.png?size=150x150&set=set1",
                            LastName = "Johnson"
                        },
                        new
                        {
                            Id = 5,
                            CreateDateTime = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Bob",
                            IdentityUserId = "9ce89d88-75da-4a80-9b0d-3fe58582b8e2",
                            ImageLocation = "https://robohash.org/quiundedignissimos.png?size=150x150&set=set1",
                            LastName = "Williams"
                        },
                        new
                        {
                            Id = 6,
                            CreateDateTime = new DateTime(2022, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Eve",
                            IdentityUserId = "d224a03d-bf0c-4a05-b728-e3521e45d74d",
                            ImageLocation = "https://robohash.org/hicnihilipsa.png?size=150x150&set=set1",
                            LastName = "Davis"
                        });
                });

            modelBuilder.Entity("Capstone_2.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttackPower")
                        .HasColumnType("integer");

                    b.Property<int>("BluntArmor")
                        .HasColumnType("integer");

                    b.Property<int>("BluntPenetration")
                        .HasColumnType("integer");

                    b.Property<int>("Health")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PiercingArmor")
                        .HasColumnType("integer");

                    b.Property<int>("PiercingPenetration")
                        .HasColumnType("integer");

                    b.Property<int>("SlashingArmor")
                        .HasColumnType("integer");

                    b.Property<int>("SlashingPenetration")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AttackPower = 10,
                            BluntArmor = 3,
                            BluntPenetration = 7,
                            Health = 50,
                            Name = "Fighter",
                            PiercingArmor = 3,
                            PiercingPenetration = 6,
                            SlashingArmor = 3,
                            SlashingPenetration = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AttackPower = 20,
                            BluntArmor = 9,
                            BluntPenetration = 1,
                            Health = 100,
                            Name = "Paladin",
                            PiercingArmor = 9,
                            PiercingPenetration = 1,
                            SlashingArmor = 9,
                            SlashingPenetration = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            AttackPower = 5,
                            BluntArmor = 1,
                            BluntPenetration = 10,
                            Health = 40,
                            Name = "Thief",
                            PiercingArmor = 2,
                            PiercingPenetration = 10,
                            SlashingArmor = 1,
                            SlashingPenetration = 10,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Capstone_2.Models.Enemy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttackPower")
                        .HasColumnType("integer");

                    b.Property<int>("BaseExperience")
                        .HasColumnType("integer");

                    b.Property<int>("BaseHealth")
                        .HasColumnType("integer");

                    b.Property<int>("BluntArmor")
                        .HasColumnType("integer");

                    b.Property<bool>("BluntDamage")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FireResist")
                        .HasColumnType("integer");

                    b.Property<int>("IceResist")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<int>>("ItemIds")
                        .HasColumnType("integer[]");

                    b.Property<int>("LightningResist")
                        .HasColumnType("integer");

                    b.Property<int>("MaxGold")
                        .HasColumnType("integer");

                    b.Property<int>("MaxLevel")
                        .HasColumnType("integer");

                    b.Property<int>("MinGold")
                        .HasColumnType("integer");

                    b.Property<int>("MinLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PiercingArmor")
                        .HasColumnType("integer");

                    b.Property<bool>("PiercingDamage")
                        .HasColumnType("boolean");

                    b.Property<int>("SlashingArmor")
                        .HasColumnType("integer");

                    b.Property<bool>("SlashingDamage")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Enemies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AttackPower = 5,
                            BaseExperience = 10,
                            BaseHealth = 30,
                            BluntArmor = 0,
                            BluntDamage = true,
                            Description = "A muddy little earth elemental",
                            FireResist = 0,
                            IceResist = 0,
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/capstone2-3243e.firebasestorage.app/o/uploads%2Fmudling.png?alt=media&token=e88f74ca-310b-4d42-8bf2-8f659ce998cf",
                            ItemIds = new List<int> { 2 },
                            LightningResist = 0,
                            MaxGold = 5,
                            MaxLevel = 5,
                            MinGold = 1,
                            MinLevel = 1,
                            Name = "Mudling",
                            PiercingArmor = 0,
                            PiercingDamage = false,
                            SlashingArmor = 0,
                            SlashingDamage = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AttackPower = 5,
                            BaseExperience = 10,
                            BaseHealth = 30,
                            BluntArmor = 0,
                            BluntDamage = false,
                            Description = "An innocent looking grass elemental",
                            FireResist = 0,
                            IceResist = 0,
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/capstone2-3243e.firebasestorage.app/o/uploads%2Fgrassling.png?alt=media&token=7bb90e0a-ca52-4c19-b67e-babe6681c157",
                            ItemIds = new List<int> { 6 },
                            LightningResist = 0,
                            MaxGold = 5,
                            MaxLevel = 5,
                            MinGold = 1,
                            MinLevel = 1,
                            Name = "Grassling",
                            PiercingArmor = 0,
                            PiercingDamage = false,
                            SlashingArmor = 0,
                            SlashingDamage = true,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            AttackPower = 5,
                            BaseExperience = 10,
                            BaseHealth = 30,
                            BluntArmor = 0,
                            BluntDamage = false,
                            Description = "A harmless looking water elemental",
                            FireResist = 0,
                            IceResist = 0,
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/capstone2-3243e.firebasestorage.app/o/uploads%2Fwaterling.png?alt=media&token=a752abdc-a38d-469f-9029-a05f3acbc565",
                            ItemIds = new List<int> { 2 },
                            LightningResist = 0,
                            MaxGold = 5,
                            MaxLevel = 5,
                            MinGold = 1,
                            MinLevel = 1,
                            Name = "Waterling",
                            PiercingArmor = 0,
                            PiercingDamage = true,
                            SlashingArmor = 0,
                            SlashingDamage = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            AttackPower = 9,
                            BaseExperience = 10,
                            BaseHealth = 90,
                            BluntArmor = 2,
                            BluntDamage = false,
                            Description = "An angry looking Gnoll",
                            FireResist = 0,
                            IceResist = 0,
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/capstone2-3243e.firebasestorage.app/o/uploads%2F_496c9af9-a760-46b9-bf18-fd7014b94883.jpg?alt=media&token=8953b581-9615-4c8f-b11e-da010ffba5dd",
                            ItemIds = new List<int> { 1 },
                            LightningResist = 0,
                            MaxGold = 12,
                            MaxLevel = 10,
                            MinGold = 4,
                            MinLevel = 6,
                            Name = "Gnoll Mage",
                            PiercingArmor = 2,
                            PiercingDamage = false,
                            SlashingArmor = 2,
                            SlashingDamage = true,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            AttackPower = 18,
                            BaseExperience = 78,
                            BaseHealth = 150,
                            BluntArmor = 5,
                            BluntDamage = false,
                            Description = "A small Kobold",
                            FireResist = 0,
                            IceResist = 0,
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/capstone2-3243e.firebasestorage.app/o/uploads%2F_7a867825-4cea-4ebc-8595-af8584818925.jpg?alt=media&token=1c37fb3b-1a7e-4a8d-8d45-5dcd4fff9991",
                            ItemIds = new List<int> { 6 },
                            LightningResist = 0,
                            MaxGold = 26,
                            MaxLevel = 15,
                            MinGold = 12,
                            MinLevel = 10,
                            Name = "Kobold",
                            PiercingArmor = 5,
                            PiercingDamage = true,
                            SlashingArmor = 5,
                            SlashingDamage = true,
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            AttackPower = 33,
                            BaseExperience = 250,
                            BaseHealth = 300,
                            BluntArmor = 20,
                            BluntDamage = true,
                            Description = "A large Minotaur",
                            FireResist = 0,
                            IceResist = 0,
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/capstone2-3243e.firebasestorage.app/o/uploads%2F_657577c4-8972-4639-8aff-fa94d3767f35.jpg?alt=media&token=6a5fe8bc-9790-4588-9bd7-e1cdd925bace",
                            ItemIds = new List<int> { 8, 9, 10 },
                            LightningResist = 0,
                            MaxGold = 65,
                            MaxLevel = 30,
                            MinGold = 30,
                            MinLevel = 20,
                            Name = "Minotaur",
                            PiercingArmor = 10,
                            PiercingDamage = true,
                            SlashingArmor = 10,
                            SlashingDamage = true,
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            AttackPower = 27,
                            BaseExperience = 200,
                            BaseHealth = 230,
                            BluntArmor = 0,
                            BluntDamage = false,
                            Description = "",
                            FireResist = 0,
                            IceResist = 0,
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/capstone2-3243e.firebasestorage.app/o/uploads%2F_8a350560-8617-4f3c-baa3-b3d6b7191db7.jpg?alt=media&token=43fdecd8-f5ff-426e-a5f7-5a918d0392e8",
                            ItemIds = new List<int> { 7 },
                            LightningResist = 0,
                            MaxGold = 45,
                            MaxLevel = 25,
                            MinGold = 22,
                            MinLevel = 20,
                            Name = "Orc Hunter",
                            PiercingArmor = 7,
                            PiercingDamage = true,
                            SlashingArmor = 7,
                            SlashingDamage = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            AttackPower = 15,
                            BaseExperience = 200,
                            BaseHealth = 400,
                            BluntArmor = 40,
                            BluntDamage = true,
                            Description = "",
                            FireResist = 0,
                            IceResist = 0,
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/capstone2-3243e.firebasestorage.app/o/uploads%2F_e8af266a-749d-4b95-9673-336e05df4dcc.jpg?alt=media&token=4bc4d096-4287-4c29-a6d4-5e67741f463b",
                            ItemIds = new List<int> { 1, 5, 8 },
                            LightningResist = 0,
                            MaxGold = 90,
                            MaxLevel = 25,
                            MinGold = 40,
                            MinLevel = 20,
                            Name = "Forest Dweller",
                            PiercingArmor = 10,
                            PiercingDamage = false,
                            SlashingArmor = 10,
                            SlashingDamage = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            AttackPower = 200,
                            BaseExperience = 3750,
                            BaseHealth = 4000,
                            BluntArmor = 300,
                            BluntDamage = true,
                            Description = "",
                            FireResist = 0,
                            IceResist = 0,
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/capstone2-3243e.firebasestorage.app/o/uploads%2F_324919a7-190f-4cc0-a8ee-b4678b6ac2f3.jpg?alt=media&token=a6284056-b304-4e12-8702-7f9ba7718132",
                            ItemIds = new List<int> { 2, 22 },
                            LightningResist = 0,
                            MaxGold = 700,
                            MaxLevel = 90,
                            MinGold = 500,
                            MinLevel = 80,
                            Name = "Dragon",
                            PiercingArmor = 200,
                            PiercingDamage = true,
                            SlashingArmor = 200,
                            SlashingDamage = true,
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            AttackPower = 7,
                            BaseExperience = 35,
                            BaseHealth = 60,
                            BluntArmor = 1,
                            BluntDamage = false,
                            Description = "",
                            FireResist = 0,
                            IceResist = 0,
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/capstone2-3243e.firebasestorage.app/o/uploads%2Fgiant%20rat.png?alt=media&token=d0ba98a3-ee93-48fa-b25a-d9b12e6e63a1",
                            ItemIds = new List<int>(),
                            LightningResist = 0,
                            MaxGold = 12,
                            MaxLevel = 10,
                            MinGold = 7,
                            MinLevel = 5,
                            Name = "Giant Rat",
                            PiercingArmor = 1,
                            PiercingDamage = true,
                            SlashingArmor = 1,
                            SlashingDamage = true,
                            UserId = 1
                        },
                        new
                        {
                            Id = 11,
                            AttackPower = 9,
                            BaseExperience = 70,
                            BaseHealth = 90,
                            BluntArmor = 5,
                            BluntDamage = true,
                            Description = "",
                            FireResist = 0,
                            IceResist = 0,
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/capstone2-3243e.firebasestorage.app/o/uploads%2Fwild%20boar.png?alt=media&token=6aa861fc-ae0f-412d-aba8-812ffde7bad6",
                            ItemIds = new List<int> { 5 },
                            LightningResist = 0,
                            MaxGold = 10,
                            MaxLevel = 10,
                            MinGold = 5,
                            MinLevel = 6,
                            Name = "Wild Boar",
                            PiercingArmor = 0,
                            PiercingDamage = true,
                            SlashingArmor = 0,
                            SlashingDamage = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 12,
                            AttackPower = 55,
                            BaseExperience = 2100,
                            BaseHealth = 1350,
                            BluntArmor = 50,
                            BluntDamage = false,
                            Description = "",
                            FireResist = 0,
                            IceResist = 0,
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/capstone2-3243e.firebasestorage.app/o/uploads%2F_f4076778-abc0-4fec-8388-0a29374242ff.jpg?alt=media&token=e163475d-1ead-4ffa-9584-aac4f20d39ea",
                            ItemIds = new List<int> { 7, 8, 21, 22 },
                            LightningResist = 0,
                            MaxGold = 250,
                            MaxLevel = 80,
                            MinGold = 100,
                            MinLevel = 70,
                            Name = "Forest Esper",
                            PiercingArmor = 120,
                            PiercingDamage = true,
                            SlashingArmor = 120,
                            SlashingDamage = true,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Capstone_2.Models.EnemyItem", b =>
                {
                    b.Property<int>("EnemiesId")
                        .HasColumnType("integer");

                    b.Property<int>("ItemsId")
                        .HasColumnType("integer");

                    b.HasKey("EnemiesId", "ItemsId");

                    b.HasIndex("ItemsId");

                    b.ToTable("EnemiesItems");

                    b.HasData(
                        new
                        {
                            EnemiesId = 1,
                            ItemsId = 1
                        },
                        new
                        {
                            EnemiesId = 1,
                            ItemsId = 2
                        },
                        new
                        {
                            EnemiesId = 1,
                            ItemsId = 3
                        });
                });

            modelBuilder.Entity("Capstone_2.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Shortsword"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Claymore"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Longbow"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Great Axe"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Axe"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Leather Chestpiece"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Small Healing Potion"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Small Mana Potion"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Sharp Dagger"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Mudball"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Fish"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Leaf Perch"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Copper Ore"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Leather Trousers"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Plate Gauntlets"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Large Bone"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Small Bone"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Cape"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Small Key"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Fishing Rod"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Pickle Lily"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Tome"
                        });
                });

            modelBuilder.Entity("EnemyItem", b =>
                {
                    b.Property<int>("EnemiesId")
                        .HasColumnType("integer");

                    b.Property<int>("ItemsId")
                        .HasColumnType("integer");

                    b.HasKey("EnemiesId", "ItemsId");

                    b.HasIndex("ItemsId");

                    b.ToTable("EnemyItem");

                    b.HasData(
                        new
                        {
                            EnemiesId = 1,
                            ItemsId = 1
                        },
                        new
                        {
                            EnemiesId = 1,
                            ItemsId = 2
                        },
                        new
                        {
                            EnemiesId = 1,
                            ItemsId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f674c948-8c2f-4caa-a337-064d42f0cff5",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDr7HwDRJ3WjfLYzxX1Vnkx46ZuQBSswGbObyLTQ55VIo5Ig14MFoiJrezEVtMThWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fb429439-2bb3-4796-b430-5d018c477c29",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c59cb69f-1554-4d64-8c61-9c281e3681cb",
                            Email = "john@doe.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEOeERIwd3XX+gqlnLmE30yUnpXZ9jlEuApCWGjTeDTlpiS/32Qo0p+drTkfF4weXlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "37f2372e-84d1-4178-a09b-3aef9c32c3c8",
                            TwoFactorEnabled = false,
                            UserName = "JohnDoe"
                        },
                        new
                        {
                            Id = "a7d21fac-3b21-454a-a747-075f072d0cf3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1541af62-5ee8-4b80-8358-92a3112ddc6e",
                            Email = "jane@smith.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAU9YpHbFiG1ca6I3z4aH1oFvwpa2rUW6RmAjdLDmSKzVbMOj8phvEMmKEaR0LsIEQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a99f5fb2-ef81-49e5-9d06-9f926f2c4d05",
                            TwoFactorEnabled = false,
                            UserName = "JaneSmith"
                        },
                        new
                        {
                            Id = "c806cfae-bda9-47c5-8473-dd52fd056a9b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f120f0b-c6de-4d99-91ef-4b2eb04f1f5d",
                            Email = "alice@johnson.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEIo8bIZD4un/LFJkBus/IsPhq8hNCwNblSaSaWqF85YZMMfs1aNMUsue8Eu0NguTLQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c0235bc-02ed-46cd-ad54-dced8a7d3a49",
                            TwoFactorEnabled = false,
                            UserName = "AliceJohnson"
                        },
                        new
                        {
                            Id = "9ce89d88-75da-4a80-9b0d-3fe58582b8e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c6e2c593-e7a9-48de-a61e-0fa07563c1a5",
                            Email = "bob@williams.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEC7uB5X2TqTzkgS+85El9MKxrarAIBSM1Tk3Q94uF1F4PBTNGUMqzTa2+TPgHOeRFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d6ee5eb-dfb0-4769-a0cc-6c582115872b",
                            TwoFactorEnabled = false,
                            UserName = "BobWilliams"
                        },
                        new
                        {
                            Id = "d224a03d-bf0c-4a05-b728-e3521e45d74d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db4dd824-9525-484b-bb59-41117769cc12",
                            Email = "Eve@Davis.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELXqrjSnXVAglgv0C/wtZkzthHUk90X+xnjYWyCFFjvyXou/Zgdb1jZMRZGWoK8pCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "39ff4205-91a5-432d-a34b-edcba7992763",
                            TwoFactorEnabled = false,
                            UserName = "EveDavis"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Capstone2.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Capstone_2.Models.Enemy", b =>
                {
                    b.HasOne("Capstone2.Models.UserProfile", null)
                        .WithMany("Enemies")
                        .HasForeignKey("UserProfileId");
                });

            modelBuilder.Entity("Capstone_2.Models.EnemyItem", b =>
                {
                    b.HasOne("Capstone_2.Models.Enemy", "Enemy")
                        .WithMany("EnemyItems")
                        .HasForeignKey("EnemiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone_2.Models.Item", "Item")
                        .WithMany("EnemyItems")
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enemy");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("EnemyItem", b =>
                {
                    b.HasOne("Capstone_2.Models.Enemy", null)
                        .WithMany()
                        .HasForeignKey("EnemiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone_2.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Capstone2.Models.UserProfile", b =>
                {
                    b.Navigation("Enemies");
                });

            modelBuilder.Entity("Capstone_2.Models.Enemy", b =>
                {
                    b.Navigation("EnemyItems");
                });

            modelBuilder.Entity("Capstone_2.Models.Item", b =>
                {
                    b.Navigation("EnemyItems");
                });
#pragma warning restore 612, 618
        }
    }
}
